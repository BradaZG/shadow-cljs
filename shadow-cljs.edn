{:verbose true

 :log {:level :debug}

 ;; :deps {:aliases []}
 :lein {:profile "+cljs"}

 ;; :ssl {}

 :http
 {}

 :dev-http
 {8600 "out/demo-browser/public"
  8606 "out/demo-test-browser"}

 :plugins [demo.dummy-plugin]

 :nrepl false ;; {:port 8202 :middleware []}

 :source-paths
 ["src/dev"
  "src/main"
  "src/test"]

 :builds
 {:cli
  {:target :npm-module
   :entries [shadow.cljs.npm.cli]
   :output-dir "packages/shadow-cljs/cli/dist"

   :compiler-options
   {:optimizations :advanced
    :infer-externs :auto}

   :devtools
   {:enabled false}}

  :create-cli
  {:target :node-script
   :main shadow.cljs.npm.create/main
   :output-to "packages/create-cljs-project/dist/script.js"
   :compiler-options {:infer-externs :auto}
   :devtools {:enabled false}}

  :babel-worker
  {:target :node-script
   :main shadow.cljs.npm.babel-worker/main
   :output-to "src/ui-release/shadow/cljs/dist/babel-worker.js"
   :compiler-options {:infer-externs :auto}
   :devtools {:enabled false}}

  :ui
  {:target :browser

   :output-dir "src/ui-release/shadow/cljs/ui/dist/js"
   :dev {:output-dir ".shadow-cljs/ui/js"}
   :asset-path "/js"

   :compiler-options
   {:infer-externs :auto
    :warnings {:invalid-arithmetic true}}

   :js-options
   {:node-modules-dir "packages/ui"}

   :module-loader true
   :modules
   {:app
    {:init-fn shadow.cljs.ui.app/init}
    :repl
    {:init-fn shadow.cljs.ui.pages.repl/init
     :depends-on #{:app}}
    :build
    {:init-fn shadow.cljs.ui.pages.build/init
     :depends-on #{:app}}}

   :devtools
   {:preloads [fulcro.inspect.preload]
    ;; :loader-mode :eval
    }}

  :build-report
  {:target :browser
   :output-dir "src/ui-release/shadow/cljs/build_report/dist/js"

   :compiler-options
   {:infer-externs :auto}

   :modules
   {:main {:entries [shadow.cljs.build-report.ui]}}

   :js-options
   {:node-modules-dir "packages/ui"}

   :devtools
   {:enabled false}}

  :devtools-ext
  {:target :chrome-extension
   :extension-dir "packages/chrome-ext"
   :manifest-file "packages/chrome-ext/chrome-manifest.edn"
   :outputs
   {:devtools {:output-type :chrome/shared
               :init-fn shadow.cljs.ui.chrome-ext.devtools/init}
    :panel {:output-type :chrome/shared
            :init-fn shadow.cljs.ui.chrome-ext.panel/init}}}

  :launcher-main
  {:target :node-script
   :output-to "packages/launcher/index.js"
   :main shadow.cljs.launcher.main/init
   :compiler-options
   {:infer-externs :auto
    :source-map true}
   :devtools
   {:autoload true}}

  :launcher-renderer
  {:target :browser
   :output-dir "packages/launcher/web/js"
   :asset-path "js"
   :compiler-options
   {:infer-externs :auto
    :source-map true}
   :js-options
   {:js-provider :require}
   :modules
   {:ui
    {:init-fn shadow.cljs.launcher.ui/init}}
   :devtools
   {:loader-mode :eval
    :watch-dir "packages/launcher/web"}}

  ;; test builds

  :browser
  {:target :browser

   :output-dir "out/demo-browser/public/js"
   :asset-path "/js"

   :compiler-options
   {:infer-externs :auto
    ;; :strip-type-prefixes #{"cljs.pprint"}
    :shadow-keywords true
    ;; :closure-output-charset "US-ASCII"
    :closure-defines
    {demo.browser/FOO "bar"}}

   :build-hooks
   [(demo.hooks/dummy 1 2 3)]

   :module-loader true
   ;; :module-hash-names true
   :modules
   {:base
    {:entries
     [cljs.core demo.sm-before]
     :depends-on
     #{}}

    :demo
    {:entries
     [demo.browser]
     :depends-on
     #{:base}}

    :extra
    {:entries
     [demo.browser-extra]
     :depends-on
     #{:demo}}

    :worker
    {:entries
     [demo.worker]
     :depends-on #{:base}
     :web-worker true}}

   :js-options
   {:js-provider :shadow
    :variable-renaming :local
    :resolve
    {"moment"
     false

     "circular-test"
     {:target :file
      :file "test/dummy/circular-a.js"}
     "babel-test"
     {:target :file
      :file "test/es6/babel.js"}
     }}

   :devtools
   {:loader-mode :eval
    :repl-init-ns demo.browser
    :before-load-async demo.browser/stop-from-config
    :after-load demo.browser/start-from-config}}

  :now-lambda
  {:target :node-library
   :exports-var demo.now/handler
   :output-to "out/demo-now/index.js"}

  :self-contained-script
  {:target :node-script
   :main demo.script/main
   :js-options
   {:js-provider :shadow
    :keep-native-requires true
    ;; :keep-as-require #{"which"}
    }

   :output-to "out/demo-script-bundle/script.js"}

  #_#_:browser-single
      {:target :browser

       :output-dir "out/demo-browser-single/public/js"
       :asset-path "/js"

       :compiler-options
       {:infer-externs :auto
        :shadow-keywords true
        :closure-defines {demo.browser/FOO "bar"}}

       :modules
       {:demo {:entries [demo.browser]}}

       :devtools
       {:before-load-async demo.browser/stop-from-config
        :after-load demo.browser/start-from-config}}

  #_#_:chrome-ext
      {:target :chrome-extension
       :extension-dir "out/chrome-ext"
       :manifest-file "out/chrome-manifest.edn"}

  :test-browser
  {:target :browser-test
   :test-dir "out/demo-test-browser"}

  :test-node
  {:target :node-test
   :output-to "out/demo-test-node/script.js"}

  #_#_:test-fail
      {:target :node-test
       :output-to "out/demo-test-node-fail/script.js"
       :ns-regexp "demo.test-fail"}

  #_#_:test-karma
      {:target :karma
       :output-to "out/demo-karma/test.js"}

  #_#_:sm-test
      {:target :browser

       :output-dir "out/demo-sm-test/public/js"
       :asset-path "/js"

       :compiler-options
       {:source-map true
        :pretty-print false}

       :modules
       {:base
        {:entries
         [cljs.core]
         :depends-on
         #{}}

        :test
        {:entries [demo.sm-test]
         :depends-on #{:base}}}

       :js-options
       {:js-provider :shadow
        :resolve
        {"js-sm-test"
         {:target :file
          :file "test/cjs/js-sm-test.js"}}}

       :devtools
       {:http-root "out/demo-sm-test/public"
        :http-port 8605
        :async-require true
        :enabled false}}

  #_#_:bootstrap-host
      {:target :browser

       :output-dir "out/demo-selfhost/public/simple/js"
       :asset-path "/simple/js"

       :compiler-options
       {:optimizations :simple}

       :modules
       {:base
        {:entries [demo.selfhost.simple]}}

       :devtools
       {:http-root "out/demo-selfhost/public"
        :http-port 8610
        :before-load demo.selfhost.simple/stop
        :after-load demo.selfhost.simple/start}}

  #_#_:bootstrap-worker
      {:target :browser

       :output-dir "out/demo-selfhost/public/worker/js"
       :asset-path "/worker/js"

       :compiler-options
       {:optimizations :simple}

       :modules
       {:base
        {:entries [shadow.cljs.bootstrap.env
                   demo.selfhost.host]}
        :worker
        {:entries [demo.selfhost.worker]
         :depends-on #{:base}
         :web-worker true}}

       :devtools
       {:before-load demo.selfhost.host/stop
        :after-load demo.selfhost.host/start}}

  :bootstrap-support
  {:target :bootstrap
   :output-dir "out/demo-selfhost/public/bootstrap"
   :exclude #{cljs.js}
   :entries [cljs.js demo.macro demo.lib reagent.core]
   :macros []}

  #_#_:js-only
      {:target :browser
       :output-dir "out/demo-js-only/public/js"
       :asset-path "/js"
       :compiler-options
       {:optimizations :simple
        :pretty-print true}
       :modules {:base {:entries [cljs.core
                                  shadow.js]}
                 :main {:entries ["/test/cjs/entry.js"]
                        :depends-on #{:base}}}
       :devtools
       {:enabled false
        :console-support false}}

  #_#_:closure
      {:target :browser
       :output-dir "out/demo-closure/public/js"
       :asset-path "/js"
       :modules {:base {:entries [cljs.core
                                  shadow.js]}
                 :main {:entries [demo.reagent]
                        :depends-on #{:base}}}
       :compiler-options
       {:externs ["test/react.ext.js"
                  "test/react-dom.ext.js"]
        :closure-warnings {:global-this :off}}
       :js-options
       {:js-provider :closure}
       :devtools
       {:http-root "out/demo-closure/public"
        :http-port 7810
        :autoload true}}

  #_#_:closure-es6
      {:target :browser
       :output-dir "out/demo-closure-es6/public/js"
       :asset-path "/js"
       :modules {:main {:entries [demo.closure]}}
       :js-options
       {:js-provider :closure}
       :devtools
       {:http-root "out/demo-closure-es6/public"
        :http-port 7820
        :autoload true}}

  :script
  {:target :node-script
   :main demo.script/main
   :output-to "out/demo-script/script.js"

   :compiler-options
   {:optimizations :simple
    :source-map-use-fs-paths true}

   :js-options
   {:resolve
    {"codemirror" false}}

   :devtools
   {:before-load-async demo.script/stop
    :after-load demo.script/start
    :preloads [demo.preload]}}

  :bootstrap-script-host
  {:target :node-script
   :main demo.bootstrap-script/main
   :output-to "out/demo-bootstrap/script.js"

   :compiler-options
   {:optimizations :simple}

   :devtools
   {:enabled false}}

  :bootstrap-script-support
  {:target :bootstrap
   :output-dir "out/demo-bootstrap/bootstrap"
   :exclude #{cljs.js}
   :entries [cljs.js demo.macro]
   :macros []
   :js-options
   {:js-provider :require}}

  :library
  {:target :node-library
   :output-to "out/demo-library/lib.js"
   :exports
   {:hello demo.lib/hello}
   :js-options
   {:js-provider :shadow
    :keep-native-requires true}}

  #_#_:custom
      {:target build/custom

       :output-dir "out/demo-browser/js"
       :asset-path "/js"

       :modules
       {:demo {:entries [demo.browser]}}

       :devtools
       {:before-load demo.browser/stop
        :after-load demo.browser/start}}

  :warnings
  {:target :node-script
   :main demo.warnings/main
   :output-to "out/demo-warnings/script.js"}

  :errors
  {:target :node-script
   :main demo.errors/main
   :output-to "out/demo-errors/script.js"}

  #_#_:foreign
      {:target :browser
       :output-dir "out/demo-foreign/js"
       :asset-path "/js"
       :compiler-options
       {:externs
        ["src/dev/demo/foreign-ext.js"]}
       :modules
       {:main {:entries [demo.foreign]}}}

  :npm
  {:target :npm-module
   :output-dir "out/demo-npm/lib"
   :entries [demo.npm
             #_demo.rel-require]}

  #_#_:azure-fn
      {:target :azure-app
       :fn-map {:simple demo.azure.simple/test-fn}
       :app-dir "out/azure-fn"}

  #_#_:expo-ios
      {:target :react-native
       :init-fn demo.rn/init
       :output-to "out/testCRNA/index.js"
       :devtools {:autoload true
                  :preload [shadow.expo.keep-awake]}}

  #_#_:expo-android
      {:target :expo
       :init-fn demo.rn/init
       :platform "android"
       :expo-root "out/TestCRNA"
       :output-dir "out/TestCRNA/out-android"
       :devtools
       {:http-port 19501
        :http-root "out/TestCRNA/out-android"}}

  #_#_:npm-web
      {:target :npm-module
       :runtime :browser
       :entries [demo.browser]
       :output-dir "out/npm-web/src/cljs"
       :compiler-options
       {:externs ["shadow/cljs/npm/externs.js"
                  "demo/browser-externs.js"]}}

  #_#_:node-repl-test
      {:target :node-script
       :main shadow.cljs.devtools.client.node-repl/main
       :output-to "out/node-repl-dev/node-repl.js"}

  :dce
  {:target :browser
   :output-dir "target/dce-test"
   :compiler-options
   {:fn-invoke-direct true}
   :modules
   {:core {:entries [cljs.core]}
    :main {:entries [demo.dce]
           :depends-on #{:core}}}
   }}}
